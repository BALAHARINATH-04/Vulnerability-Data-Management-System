import React, { useEffect, useState } from "react"
import { Container, Table, Dropdown, DropdownButton, Button, Offcanvas, Form, Pagination } from "react-bootstrap"
import usernameCred from "../models/username"
import listCred from "../models/listCred"
import styles from "../utilities/home.module.css"
import {useNavigate} from "react-router-dom"

const Home:React.FC<usernameCred>=({username})=>{

    const navigate=useNavigate()

    const [showMenu, setShowMenu] = useState(false);
    const [year, setYear] = useState("");
    const [cveid, setCveid] = useState("");
    const [score, setScore] = useState("");
    const [NDays, setNDays] = useState("");

    const [listCredentials,setListCredentials]=useState<listCred>({
        pageNo:1,
        pageSize:10,
        totalLength:0,
        totalPages:0,
        items:[]
    })
    
    useEffect(()=>{
        const getList=async()=>{
            const cvelist=await fetch("http://localhost:5000/vms/vulnerabilityRoute/list",{
                method:"POST",
                headers:{
                    "Content-Type":"application/json",
                },
                credentials:"include",
                body:JSON.stringify({
                    pageNo:listCredentials.pageNo,
                    pageSize:listCredentials.pageSize
                })
            })
            const cvelistResponse=await cvelist.json()
            setListCredentials(prev=>({
                ...prev,...cvelistResponse
            }))
        }
        getList()
    },[listCredentials.pageNo,listCredentials.pageSize])

    const handlePageSize10=()=>{
        setListCredentials({
            ...listCredentials,pageSize:10
        })
    }

    const handlePageSize50=()=>{
        setListCredentials({
            ...listCredentials,pageSize:50
        })
    }

    const handlePageSize100=()=>{
        setListCredentials({
            ...listCredentials,pageSize:100
        })
    }

    const handleShow=()=>{
        setShowMenu(true)
    }

    const handleClose=()=>{
        setShowMenu(false)
    }

    const handleYearChange=(e:React.ChangeEvent<HTMLInputElement>)=>{
        setYear(e.target.value)
    }

    const handleYearSubmit=()=>{
        navigate(`/cves/list/year/${year}`)
    }

    const handleIDChange=(e:React.ChangeEvent<HTMLInputElement>)=>{
        setCveid(e.target.value)
    }

    const handleIDSubmit=()=>{
        navigate(`/cves/list/${cveid}`)
    }

    const handleScoreChange=(e:React.ChangeEvent<HTMLInputElement>)=>{
        setScore(e.target.value)
    }

    const handleScoreSubmit=()=>{
        navigate(`/cves/list/score/${score}`)
    }

    const handleNDaysChange=(e:React.ChangeEvent<HTMLInputElement>)=>{
        setNDays(e.target.value)
    }

    const handleNDaysSubmit=()=>{
        navigate(`/cves/list/NDays/${NDays}`)
    }

    const handleLogout=()=>{
        const logout=async()=>{
            const logoutReq=await fetch("http://localhost:5000/vms/loginRoute/logout",{
                method:"POST",
                headers:{
                    "Content-Type":"application/json",
                },
                credentials:"include",
            })
            const logoutRes=await logoutReq.json()
            if(logoutRes.message==="Logged out successfully"){
                navigate("/")
            }
        }
        logout()
    }


    return (
        <>
        <Container className={`${styles.container}`}>
            <h1 className={`mb-4 d-flex justify-content-center`}><b>CVE DATA LIST</b></h1>
            <div className={`d-flex align-items-center justify-content-between`}>
                <h6 className={`mb-3`}><b>Total Records:{listCredentials.totalLength}</b></h6>
                <Button variant="dark" size="sm" className="border-0 mb-3" onClick={handleShow}>Menu</Button>
                <Offcanvas show={showMenu} onHide={handleClose} placement="end">
                    <Offcanvas.Header>
                    <Offcanvas.Title><h3 className="mt-2"><b>Welcome, {username}</b></h3></Offcanvas.Title>
                    </Offcanvas.Header>
                    <Offcanvas.Body className="p-0">
                    <ul className="p-0"><b>
                            <div className={`p-3 ${styles.offcanvasElements}`}><a className={`${styles.link}`} href="/cves/list">Complete List</a></div>
                            <div className={`p-3 ${styles.offcanvasElements}`}><a className={`${styles.link}`} href="/cves/list/modified/sortA">Sort by Last Modified (ASC)</a></div>
                            <div className={`p-3 ${styles.offcanvasElements}`}><a className={`${styles.link}`} href="/cves/list/modified/sortD">Sort by Last Modified (DESC)</a></div>
                            <div className={`p-3 ${styles.offcanvasElements}`}><a className={`${styles.link}`} href="/cves/list/published/sortA">Sort by Published Date (ASC)</a></div>
                            <div className={`p-3 ${styles.offcanvasElements}`}><a className={`${styles.link}`} href="/cves/list/published/sortD">Sort by Published Date (DESC)</a></div>
                            <div className={`p-3 ${styles.offcanvasElements}`}>Filter by Published Year
                            <Form onSubmit={handleYearSubmit}>
                                <div className={`d-flex align-items-center justify-content-between`}>
                                    <Form.Control className="me-2" type="text" placeholder="1998" size="sm" onChange={handleYearChange}/>
                                    <Button type="submit" variant="dark" size="sm">Filter</Button>
                                </div>
                            </Form>
                        </div>
                        <div className={`p-3 ${styles.offcanvasElements}`}>Filter by CVE ID
                            <Form onSubmit={handleIDSubmit}>
                                <div className={`d-flex align-items-center justify-content-between`}>
                                    <Form.Control className="me-2" type="text" placeholder="CVE-1999-0095" size="sm" onChange={handleIDChange}/>
                                    <Button type="submit" variant="dark" size="sm">Filter</Button>
                                </div>
                            </Form>
                        </div>
                        <div className={`p-3 ${styles.offcanvasElements}`}>Filter by Base Score
                            <Form onSubmit={handleScoreSubmit}>
                                <div className={`d-flex align-items-center justify-content-between`}>
                                    <Form.Control className="me-2" type="text" placeholder="7.8" size="sm" onChange={handleScoreChange}/>
                                    <Button type="submit" variant="dark" size="sm">Filter</Button>
                                </div>
                            </Form>
                        </div>
                        <div className={`p-3 ${styles.offcanvasElements}`}>Filter by Days
                            <Form onSubmit={handleNDaysSubmit}>
                                <div className={`d-flex align-items-center justify-content-between`}>
                                    <Form.Control className="me-2" type="text" placeholder="185" size="sm" onChange={handleNDaysChange}/>
                                    <Button type="submit" variant="dark" size="sm">Filter</Button>
                                </div>
                            </Form>
                        </div>
                        <div className={`p-3`}>
                            <Form onSubmit={handleLogout}>
                                    <Button className="w-100" type="submit" variant="dark" size="lg">Logout</Button>
                            </Form>
                        </div>
                    </b></ul>
                    </Offcanvas.Body>
                </Offcanvas>
            </div>
            <Table bordered hover className={`mb-3`}>
                <thead>
                    <tr>
                        <th>CVE ID</th>
                        <th>IDENTIFIER</th>
                        <th>PUBLISHED DATE</th>
                        <th>LAST MODIFIED DATE</th>
                        <th>STATUS</th>
                    </tr>
                </thead>
                <tbody>
                    {listCredentials.items.map((item)=>{
                        return (
                            <tr key={item.id}>
                                <td><a className={`${styles.link}`} href={`/cves/list/${item.id}`}>{item.id}</a></td>
                                <td>{item.identifier}</td>
                                <td>{item.publishedDate}</td>
                                <td>{item.lastModified}</td>
                                <td>{item.status}</td>
                            </tr>
                        )
                    })}
                </tbody>
            </Table>
            <div className={`d-flex align-items-center justify-content-between`}>
                <div className={`d-flex align-items-center justify-content-between`}>
                    <DropdownButton variant="dark" id="pageSize" title="Results per page" size="sm" drop="end">
                        <Dropdown.Item onClick={handlePageSize10}>10</Dropdown.Item>
                        <Dropdown.Item onClick={handlePageSize50}>50</Dropdown.Item>
                        <Dropdown.Item onClick={handlePageSize100}>100</Dropdown.Item>
                    </DropdownButton>
                    <div className={`ms-2`}><b>{listCredentials.pageSize} records</b></div>
                </div>
                <Pagination>
                    <Pagination.Prev
                        onClick={() => {
                            const newPageNo = Math.max(listCredentials.pageNo - 5, 1);
                            setListCredentials({...listCredentials, pageNo: newPageNo});
                        }}
                        disabled={listCredentials.pageNo === 1}
                    />
                    {[...Array(5)].map((_, index) => {
                        const pageNumber = listCredentials.pageNo + index;
                        return (
                            pageNumber <= listCredentials.totalPages && (
                                <Pagination.Item
                                    className={`${styles.pagination}`}
                                    key={index}
                                    active={pageNumber === listCredentials.pageNo}
                                    onClick={() => setListCredentials({...listCredentials, pageNo: pageNumber})}
                                >
                                    {pageNumber}
                                </Pagination.Item>
                            )
                        );
                    })}
                    <Pagination.Next
                        onClick={() => {
                            const newPageNo = Math.min(listCredentials.pageNo + 5, listCredentials.totalPages);
                            setListCredentials({...listCredentials, pageNo: newPageNo});
                        }}
                        disabled={listCredentials.pageNo + 5 > listCredentials.totalPages}
                    />
                </Pagination>
            </div>
        </Container>
      </>
    )
}

export default Home