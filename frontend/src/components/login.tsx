import React,{useState} from "react"
import onLoginProps from "../models/onLogin"
import loginCredentials from "../models/login"
import { Col, Container, Row, Form, FloatingLabel, Button } from "react-bootstrap"
import styles from "../utilities/login.module.css"

const Login:React.FC<onLoginProps>=({onLogin})=>{
    
    const [loginCred,setLoginCred]=useState<loginCredentials>({
        username:"",
        password:""
    })

    const [error,setError]=useState<{[key:string]:string}>({})

    const [validState,setValidState]=useState<{[key:string]:boolean}>({
        username:true,
        password:true
    })

    const handleInputChange=(e:React.ChangeEvent<HTMLInputElement>)=>{
        setLoginCred({
            ...loginCred,[e.target.name]:e.target.value
        })
    }

    const handleSubmit=(e:React.FormEvent)=>{
        e.preventDefault()
        const validationError:{[key:string]:string}={}
        const validationState:{[key:string]:boolean}={}
        if(!(/^[^\s@]+@[^\s@]+\.[^\s@]+$/).test(loginCred.username.trim())){
            validationError.username="Enter a valid username"
            validationState.username=false
        }
        else{
            validationState.username=true
        }
        if(!(loginCred.password.trim())){
            validationError.password="Enter a valid password"
            validationState.password=false
        }
        else{
            validationState.password=true
        }
        if(Object.keys(validationError).length>0){
            setError(validationError)
            setValidState(validationState)
        }
        else{
            setError({})
            setValidState({
                username:true,
                password:true
            })
            fetch("http://localhost:5000/vms/loginRoute/login",{
                method:"POST",
                headers:{
                    "Content-Type":"application/json",
                },
                credentials:"include",
                body:JSON.stringify(loginCred),
            }).then(response=>{
                if(!response.ok&&response.status===404){
                    throw new Error("Username not found")
                }
                if(!response.ok&&response.status===406){
                    throw new Error("Invalid password")
                }
                if(response.ok){
                    onLogin(loginCred.username)
                }
            }).catch(error=>{
                if(error.message==="Username not found"){
                    validationError.username=error.message
                    validationState.username=false
                }
                if(error.message==="Invalid password"){
                    validationError.password=error.message
                    validationState.password=false
                }
                setError(validationError)
                setValidState(validationState)
            })
        }
    }

    return (
        <>
        <Container className={`p-5 border border-dark rounded ${styles.container}`}>
            <Row className={`pe-3 pb-3`}>
                <Col className={`p-3 d-flex justify-content-start align-items-start flex-column`} xl={6}><h1><b>Vulnerability Data Management System</b></h1><h2><b>SecurIn</b></h2></Col>
                <Col className={`p-2 px-5`} xl={6}>
                    <Row className={`p-0`}>
                        <Form onSubmit={handleSubmit}>
                            <Col className={`p-0 mb-3 mt-2 d-flex justify-content-start align-items-center`} xl={12}><h3>Enter Credentials...</h3></Col>
                            <Col className={`p-0 mb-3`} xl={12}> 
                                <FloatingLabel
                                    controlId="username"
                                    label="Username">
                                    <Form.Control 
                                        type="text"
                                        placeholder="Username" 
                                        name="username" 
                                        onChange={handleInputChange}
                                        value={loginCred.username}
                                        className={validState.username?"":"is-invalid"}/>
                                </FloatingLabel>
                                <Form.Control.Feedback type="invalid" className={`d-block`}>{error.username}</Form.Control.Feedback>
                            </Col>
                            <Col className={`p-0 mb-4`} xl={12}> 
                                <FloatingLabel
                                    controlId="password"
                                    label="Password">
                                    <Form.Control 
                                        type="password" 
                                        placeholder="Password" 
                                        name="password"
                                        autoComplete="off"
                                        onChange={handleInputChange}
                                        value={loginCred.password}
                                        className={validState.password?"":"is-invalid"}/>
                                </FloatingLabel>
                                <Form.Control.Feedback type="invalid" className={`d-block`}>{error.password}</Form.Control.Feedback>
                            </Col>
                            <Col className={`p-0 d-flex justify-content-end`} xl={12}>
                                <Button className={`btn w-25 p-2`} variant="dark" type="submit">Login</Button>
                            </Col>
                        </Form>
                    </Row>
                </Col>
            </Row>
        </Container>
        </>
    )
}

export default Login