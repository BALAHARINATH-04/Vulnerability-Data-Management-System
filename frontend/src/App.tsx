import React, { useEffect, useState } from 'react';
import { BrowserRouter as Router,Route,Routes,Navigate } from 'react-router-dom';
import Login from './components/login'
import Home from './components/home'
import ModSortA from "./components/modSortA"
import ModSortD from "./components/modSortD"
import PubSortA from "./components/pubSortA"
import PubSortD from "./components/pubSortD"
import FilterYear from './components/FilterYear';
import FilterID from './components/FilterID';
import FilterScore from './components/FilterScore';
import FilterNDays from './components/FilterNDays';
import CVE from "./components/CVE"

function App() {

    const [isLogged,setLogged]=useState(false)

    const [isLoading,setLoading]=useState(true)

    const [username,setUsername]=useState("")

    const handleLogin=(user:string)=>{
      setLogged(true)
      setUsername(user)
    }
    
    useEffect(()=>{
        const loginCheck=async()=>{
            const sessionCheck=await fetch("http://localhost:5000/vms/loginRoute/login/session",{
                method:"POST",
                headers:{
                    "Content-Type":"application/json",
                },
                credentials:"include",
            })
            const sessionResponse=await sessionCheck.json()
            if(sessionResponse.message==="Session exists"){
                setLogged(true)
                setUsername(sessionResponse.user)
            }
            else{
                const cookieCheck=await fetch("http://localhost:5000/vms/loginRoute/login/cookie",{
                    method:"POST",
                    headers:{
                        "Content-Type":"application/json",
                    },
                    credentials:"include",
                })
                const cookieResponse=await cookieCheck.json()
                if(cookieResponse.message==="Valid cookie"){
                    setLogged(true)
                    setUsername(cookieResponse.decoded.user.username)
                }
                else{
                    setLogged(false)
                    setUsername("")
                }
            }
            setLoading(false)
        }
        loginCheck()
    },[])

    if(isLoading){
        return (
            <>
            <h1>Loading...</h1>
            </>
        )
    }
    
  return (
    <Router>
      <Routes>
        <Route path='/cves/login' element={isLogged?<Navigate to='/cves/list'/>:<Login onLogin={handleLogin}/>}/>
        <Route path='/cves/list' element={isLogged?<Home username={username}/>:<Navigate to='/cves/login'/>}/>
        <Route path='/cves/list/:id' element={isLogged?<CVE username={username}/>:<Navigate to='/cves/login'/>}/>
        <Route path='/cves/list/modified/sortA' element={isLogged?<ModSortA username={username}/>:<Navigate to='/cves/login'/>}/>
        <Route path='/cves/list/modified/sortD' element={isLogged?<ModSortD username={username}/>:<Navigate to='/cves/login'/>}/>
        <Route path='/cves/list/published/sortA' element={isLogged?<PubSortA username={username}/>:<Navigate to='/cves/login'/>}/>
        <Route path='/cves/list/published/sortD' element={isLogged?<PubSortD username={username}/>:<Navigate to='/cves/login'/>}/>
        <Route path='/cves/list/year/:year' element={isLogged?<FilterYear username={username}/>:<Navigate to='/cves/login'/>}/>
        <Route path='/cves/list/cveid/:cveid' element={isLogged?<FilterID username={username}/>:<Navigate to='/cves/login'/>}/>
        <Route path='/cves/list/score/:score' element={isLogged?<FilterScore username={username}/>:<Navigate to='/cves/login'/>}/>
        <Route path='/cves/list/NDays/:NDays' element={isLogged?<FilterNDays username={username}/>:<Navigate to='/cves/login'/>}/>
        <Route path='/' element={isLogged?<Navigate to='/cves/list'/>:<Navigate to='/cves/login'/>}/>
        <Route path="*" element={<h1>404 Error - Page not found</h1>}/>
      </Routes>
    </Router>
  );
}

export default App;