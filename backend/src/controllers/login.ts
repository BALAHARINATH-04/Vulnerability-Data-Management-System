import { Request,Response,NextFunction, RequestHandler } from "express"
import jwt from "jsonwebtoken"
import bcrypt from "bcrypt"
import env from "../utilities/validateEnv"
import JwtPayload from "../models/decodedtokenModel"
import mySessionData from "../models/sessionModel"
import loginCollection from "../models/loginModel"

export const login:RequestHandler=async(req:Request,res:Response,next:NextFunction)=>{
    const {username,password}=req.body
    try{
        const cred=await loginCollection.find({username:username}).exec()
        if(cred.length){
            const hashedPassword=cred[0].password
            if(hashedPassword){
                const passwordVerification=await bcrypt.compare(password,hashedPassword)
                if(passwordVerification){
                    (req.session as mySessionData).user=username
                    const token=jwt.sign({user:{username:username}},env.SECRET_KEY,{expiresIn:"1h"})
                    res.cookie("VMSToken",token,{
                        httpOnly:false,
                        maxAge:360000000,
                    })
                    res.status(200).json({message:"Login successful",user:username})
                }
                else{
                    res.status(406).json({message:"Invalid password"})
                }
            }
        }
        else{
            res.status(404).json({message:"Username not found"})
        }
    }
    catch(error){
        next(error)
    }
}

export const session:RequestHandler=async(req:Request,res:Response,next:NextFunction)=>{
    try{
        if((req.session as mySessionData).user){
            res.status(200).json({message:"Session exists",user:(req.session as mySessionData).user})
        }
        else{
            res.status(404).json({message:"Session doesn't exists"})
        } 
    }
    catch(error){
        next(error)
    }
}

export const cookie:RequestHandler=async(req:Request,res:Response,next:NextFunction)=>{
    try{
        if((req.session as mySessionData).decoded){
            (req.session as mySessionData).user=(req.session as mySessionData).decoded?.user.username
            const decoded=(req.session as mySessionData).decoded
            res.status(200).json({message:"Valid cookie",decoded})
        }
        else{
            res.status(404).json({message:"Cookie doesn't exists"})
        } 
    }
    catch(error){
        next(error)
    }
}

export const authenticate:RequestHandler=async(req:Request,res:Response,next:NextFunction)=>{
    const token=req.cookies.VMSToken
    if(!token){
        res.status(401).json({message:"Unauthorized: No token provided"})
    }
    try{
        const decoded=jwt.verify(token,env.SECRET_KEY) as JwtPayload
        if(decoded){
            (req.session as mySessionData).decoded=decoded
            next()
        }
        else{
            res.status(406).json({message:"Invalid token"})
        }
    }
    catch(error){
        next(error)
    }
}

export const logout:RequestHandler=async(req:Request,res:Response,next:NextFunction)=>{
    try{
        req.session.destroy((err)=>{
            if(err) res.status(500).json({message:"Error logging out"})
        })
        res.clearCookie("VMSToken")
        res.status(200).json({message:"Logged out successfully"})
    }
    catch(error){
        next(error)
    }
}