import express,{Request,Response,NextFunction} from "express"
import createHttpError,{isHttpError} from "http-errors"
import cookieParser from "cookie-parser"
import session from "express-session"
import morgan from "morgan"
import env from "./utilities/validateEnv"
import loginRouter from "./routes/login"
import vulnerabilityRouter from "./routes/vulnerability"

const app=express()

app.use((req:Request,res:Response,next:NextFunction)=>{
    res.header("Access-Control-Allow-Origin",req.headers.origin)
    res.header("Access-Control-Allow-Credentials","true")
    res.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept, Set-Cookie")
    res.header("Access-Control-Expose-Headers","Set-Cookie")
    next()
})

app.use(cookieParser())

app.use(session({
    secret:env.SECRET_KEY,
    name:"VMS.sid",
    resave:false,
    saveUninitialized:false,
    cookie:{
        httpOnly:false,
    }
}))

app.use(morgan("dev"))

app.use(express.json())

app.use("/vms/loginRoute",loginRouter)

app.use("/vms/vulnerabilityRoute",vulnerabilityRouter)

app.use((req:Request,res:Response,next:NextFunction)=>{
    next(createHttpError(404,"Endpoint not found"))
})

// eslint-disable-next-line @typescript-eslint/no-unused-vars
app.use((error:unknown,req:Request,res:Response,next:NextFunction)=>{
    console.error(error)
    let statusCode=500
    let errorMessage="An unknown error occured"
    if(isHttpError(error)){
        statusCode=error.statusCode
        errorMessage=error.message
    }
    res.status(statusCode).json({message:errorMessage})
})

export default app